POSTCLOB : Calling program
ctl-opt option(*srcstmt:*nodebugio);                   
ctl-opt dftActgrp(*no) actGrp(*caller);                
    // comment                                                   
copy QRPGLESRC,POSTCLOB_C                              
                                                       
dcl-pi postClob_t;                                     
  email  char(30);                                     
  name   char(25);                                     
  gender char(10);                                     
  status char(10);                                     
end-pi;                                                
//*****************************************************
// MainLine                                            
//*****************************************************
POSTCLOBV(email: name: gender: status);                
                                                       
*inlr = *on;       

POSTCLOB_C – Copybook
dcl-pr postClobV extPgm('POSTCLOBV');       
  email  char(30);                          
  name   char(25);                          
  gender char(10);                          
  status char(10);                          
end-pr;                                     
                                            
dcl-pr postClob_t extpgm('POSTCLOB_T');     
  email  char(30);                          
  name   char(25);                          
  gender char(10);                          
  status char(10);                          
end-pr;                                     
                                            
dcl-pr system zoned(10:0) extproc('system');
  szcmd pointer Value Options(*String);     
end-pr;                                     
                                            
dcl-s body Char(200);                       
dcl-s body Char(200);                                             
dcl-s command Char(200);                                          
dcl-s messageText varchar(32740);                                 
dcl-s messageLength int(5);                                       
dcl-s responseMsg Varchar(9999);                                  
dcl-s responseHeader Varchar(1000);                               
dcl-s responsePos Packed(4);                                      
dcl-s returnedSQLCode char(5);                                    
dcl-s tokenheader Char(500);                                      
dcl-s header Char(500);                                           
dcl-c fail const('FAIL');                                         
dcl-c pass const('PASS');                                         
dcl-c rcd const('Record Not Found');                              
dcl-c tokenKey const('Bearer 1e24167a1c6b84d104eab2d0bfa19f9a467a+
                   deab9b4132bd1d1d065a40c5f334');                
dcl-c url const('https://gorest.co.in/public-api/users');         
                                                                  
POSTCLOBV – Called program 
   Ctl-opt option(*srcstmt:*nodebugio);                                   
   Ctl-opt dftactgrp(*no) actgrp(*caller);                                
                                                                          
 /copy QRPGLESRC,postclob_c                                               
                                                                          
   Dcl-pi POSTCLOBV;                                                      
     email  char(30);                                                     
     name   char(25);                                                     
     gender char(10);                                                     
     status char(10);                                                     
   End-pi;                                                                
 //***********************************************************************
 // MainLine                                                              
 //***********************************************************************
   SetEnvironment( );                                                     
   ProcessApi( );                                                         
   *inlr = *on;                                                           
                                                                          
   Exec sql set option commit = *none;    
//***********************************************************************
// SetRequest - Set the web service variables                            
//***********************************************************************
  Dcl-proc SetEnvironment;                                               
                                                                         
    Exec sql CALL QSYS2.QCMDEXC('CHGJOB CCSID(37)');                     
    Tokenheader = '<httpHeader>'                                      +  
              '<header name="Authorization" value="'                  +  
                   %trim(TokenKey) + '">'                             +  
             '</header>'                                             +   
              '<header name="Content-Type" value="application/json">' +  
              '</header>'                                             +  
              '</httpHeader>';                                           
                                                                         
    Body = '{' + '"email":' + '"' + %trim(email)   + '",'    +           
                '"name":'  + '"' + %trim(name)    + '",'     +           
                '"gender":' + '"' + %trim(gender)  + '",'    +           
                '"status":'+ '"' + %trim(status)  + '"' + '}';           
                                                                          
   End-proc;                                                              
 //***********************************************************************
 // ProcessApi - Send Post Request And Fetch Data                         
 //***********************************************************************
   Dcl-proc ProcessApi;                                                   
                                                                          
     Exec sql                                                             
      Select Coalesce(Varchar(ResponseMsg,9999),' '),                     
             Varchar(ResponseHttpHeader,1000) into :ResponseMsg,          
                                                   :ResponseHeader        
      From Table(Systools.HttpPostClobVerbose(Trim(:Url),                 
                                              Trim(:Tokenheader),         
                                              Trim(:body)))               
                                              as JsonResponse;            
                                                                          
     Diagnostics();                                                       
     if ReturnedSqlCode = *Blanks;                                        
                                                                         
      exec sql drop table if exists qtemp/WkTestFile;                    
      exec sql create table qtemp/WkTestFile(data char(9999));           
      exec sql insert into qtemp/WkTestFile(data)                        
                              values(:ResponseMsg);                      
                                                                         
      dsply 'Check WkTestFile file in Qtemp for data';                   
    endIf;                                                               
                                                                         
  End-proc;                                                              
//***********************************************************************
// Diagnostics - get sql details                                         
//***********************************************************************
  Dcl-proc Diagnostics ;                                                 
                                                                         
    Exec sql GET DIAGNOSTICS CONDITION 1                                 
      :ReturnedSqlCode = DB2_RETURNED_SQLCODE,                           
      :MessageLength = MESSAGE_LENGTH,                                   
      :MessageText = MESSAGE_TEXT; 
           
 End-proc ;
